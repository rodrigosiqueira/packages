--- a/modules/http/http_core.c
+++ b/modules/http/http_core.c
@@ -14,6 +14,8 @@
  * limitations under the License.
  */
 
+#include <mvas/vas.h>
+
 #include "apr_strings.h"
 #include "apr_thread_proc.h"    /* for RLIMIT stuff */
 
@@ -26,6 +28,7 @@
 #include "http_core.h"
 #include "http_protocol.h"   /* For index_of_response().  Grump. */
 #include "http_request.h"
+#include "http_log.h"
 
 #include "util_filter.h"
 #include "util_ebcdic.h"
@@ -176,18 +179,75 @@
     return OK;
 }
 
+static int create_isolate_vas(const char * vas_name, mode_t permission)
+{
+  int rc = 0;
+  vasid_t vas_id = vas_find(vas_name);
+
+  // If VAS already exists, we want to delete it to have a clean VAS
+  if (vas_id >= 0)
+  {
+    rc = vas_delete(vas_id);
+    if (rc < 0)
+    {
+      return -1; // Something wrong
+    }
+  }
+
+  vas_id = vas_create(vas_name, permission);
+  if (vas_id < 0)
+  {
+    return -1;
+  }
+
+  return vas_id;
+}
+
+static int delete_vas(int vas_id)
+{
+  int rc = 0;
+
+  rc = vas_delete(vas_id);
+  if (rc < 0)
+  {
+    return -1; // Something wrong
+  }
+  return rc;
+}
+
 static int ap_process_http_sync_connection(conn_rec *c)
 {
     request_rec *r;
     conn_state_t *cs = c->cs;
     apr_socket_t *csd = NULL;
     int mpm_state = 0;
+    int rc = 0;
 
     /*
      * Read and process each request found on our connection
      * until no requests are left or we decide to close.
      */
-
+// Turn on VAS
+    mode_t mode = S_IRWXU | S_IRWXG;
+    vasid_t vas_id = create_isolate_vas("VAS_TEST", mode);
+    if (vas_id < 0)
+    {
+      ap_log_rerror(APLOG_MARK, APLOG_ERR, 0, r, APLOGNO(02831)
+                    "Error to create isolate vas");
+    }
+    else
+    {
+      rc = vas_attach(0, vas_id, mode);
+      if (rc >= 0)
+      {
+        rc = vas_switch(vas_id);
+        if (rc < 0)
+        {
+          ap_log_rerror(APLOG_MARK, APLOG_ERR, 0, r, APLOGNO(02831)
+                      "Error to switch vas");
+        }
+      }
+    }
     ap_update_child_status_from_conn(c->sbh, SERVER_BUSY_READ, c);
     while ((r = ap_read_request(c)) != NULL) {
         apr_interval_time_t keep_alive_timeout = r->server->keep_alive_timeout;
@@ -217,6 +277,28 @@
              */
             r = NULL;
         }
+// Turn of VAS
+    if (vas_id >= 0)
+    {
+      rc = vas_switch(0);
+      if (rc < 0)
+      {
+        ap_log_rerror(APLOG_MARK, APLOG_ERR, 0, r, APLOGNO(02831)
+                      "Error to switch back vas");
+      }
+      rc = vas_detach(0, vas_id);
+      if (rc < 0)
+      {
+        ap_log_rerror(APLOG_MARK, APLOG_ERR, 0, r, APLOGNO(02831)
+                      "Error to detach vas");
+      }
+      rc = vas_delete(vas_id);
+      if (rc < 0)
+      {
+        ap_log_rerror(APLOG_MARK, APLOG_ERR, 0, r, APLOGNO(02831)
+                      "Error to delete vas");
+      }
+    }
 
         if (c->keepalive != AP_CONN_KEEPALIVE || c->aborted)
             break;
